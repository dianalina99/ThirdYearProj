using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;
//using Extreme.Statistics.Distributions;

public class MapLayoutGeneration : MonoBehaviour
{

    // This derived class converts the uniformly distributed random
    // numbers generated by base.Sample() to another distribution.
    public class RandomProportional : System.Random
    {
        // The Sample method generates a distribution proportional to the value
        // of the random numbers, in the range [0.0, 1.0].
        protected override double Sample()
        {
            return System.Math.Sqrt(base.Sample());
        }

        public override int Next()
        {
            return (int)(Sample() * int.MaxValue);
        }
    }







    // Start is called before the first frame update
    int[,] map = new int[4, 4]{
                                {0, 0, 0, 0},
                                {0, 0, 0, 0},
                                {0, 0, 0, 0},
                                {0, 0, 0, 0}
                            };


    void Start()
    {
        System.Random rand = new RandomProportional();
        //System.Random rand = new System.Random();


        //Pick first room. It is always 1.
        int roomPos = rand.Next(0, 4);
        int row =0, column = roomPos;
        bool reachedBottom = false;
        int prevRoom = 0;


        while(!reachedBottom)
        {
            //Check if we reached the bottom floor room.
            if(row == 3)
            {
                reachedBottom = true;
            }

            //Initialize room with 1.
            map[row, column] = 1;

            //Check if prev room was 2 and change room type to 3.
            if(prevRoom == 2)
            {
                map[row, column] = 3;
            }
            
            if(prevRoom == 3)
            {
                map[row, column] = 2;
            }

            /* Choose moving direction:
             * 
             * 0 = left
             * 1 = right
             * 2 = up
             * 3 = down
             */

            int dir = rand.Next(0, 4);

            switch (dir)
            {
                case 0:
                    //Move to the left. Perform checks first.
                    if (CanMove(row, column - 1))
                    {
                        prevRoom = map[row, column];
                        column--;
                    }
                    break;

                case 1:
                    //Move to the right.
                    if (CanMove(row, column + 1))
                    {
                        prevRoom = map[row, column];
                        column++;  
                    }
                    break;

                case 2:
                    //Change room type to have a top exit and move up.
                    if (CanMove(row - 1, column))
                    {
                        map[row, roomPos] = 3;
                        prevRoom = map[row, column];
                        row--;
                    }
                    break;

                case 3:
                    //Change room type to have a bottom exit and move down.
                    if (CanMove(row + 1, column))
                    {
                        map[row, roomPos] = 2;
                        prevRoom = map[row, column];
                        row++;
                    }
                    break;

                default:
                    //Don't move at all.
                    break;
            }

        }

        PrintMap();

    }

    private bool CanMove(int i, int j)
    {
        if( i < 0 || i > 3 || j < 0 || j > 3 )
        {
            //Ooops, out of the map.
            return false;
        }

        
        if(map[i, j] != 0)
        {
            //We've been here before, so don't pass twice.
            return false;
        }

        return true;
    }

    void PrintMap()
    {
        using (StreamWriter writer = new StreamWriter("C:\\Users\\diana\\Desktop\\3rdYearProj\\ThirdYearProj\\map.txt"))
        {
            //Print map.
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    writer.Write(map[i, j] + ", ");
                }
                writer.WriteLine();

            }
        }
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
